# -*- coding: utf-8 -*-
"""Project2Aerospace.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1gpEaF2yWfea5QcUppviROi67kCMyeK-9
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import warnings
warnings.filterwarnings('ignore')

path1 = '/content/drive/MyDrive/Project 2/Aerospace/complexity_planning_time_data.csv'
df1 = pd.read_csv(path1)
df1 #complexity_planning_time_data
#Shows how mission planning time varies across complexity levels (Low to Critical) for both Traditional and AI approaches.

df1 = df1.rename(columns={'Complexity':'complexity'})
df1

path2 = '/content/drive/MyDrive/Project 2/Aerospace/expert_evaluation_data.csv'
df2 = pd.read_csv(path2)
df2.head() #expert_evaluation_data
#Experts from different roles and agencies rate traditional vs AI planning. Includes years of experience and perceived improvement.

df2.info()

## df2['perceived_improvement_pct'].value_counts()
# expert_id = 28 unique values
# role = Resource Planning Specialist(8); Flight Dynamics Officer(7); Mission Director(6);Science Operations Planner(4); Risk Assessment Engineer(3)
# agency = NASA(11); ESA(10); JAXA(7)
# experience = 10-15 years(12); 5-10 years(8); 15+ years(8)
# traditional_rating = assuming out of 10
# ai_rating = assuming out of 10
# perceived_improvement_pct = percentage of improvement of ai method than traditional

path3 = '/content/drive/MyDrive/Project 2/Aerospace/knowledge_transfer_data.csv'
df3 = pd.read_csv(path3)
df3 #knowledge_transfer_data
# Compares how well knowledge is transferred across mission sequences with each method.

df3.rename(columns={'Mission_Sequence':'mission_sequence'}, inplace=True)
df3

path4 = '/content/drive/MyDrive/Project 2/Aerospace/mission_phase_data.csv'
df4 = pd.read_csv(path4)
df4.head(2) #mission_phase_data
#Time spent planning different phases (Launch, Orbital, etc.) and the contingency coverage achieved.

df4.info()

# df4['contingency_coverage_pct'].value_counts()
# mission_id = from M001 to M047
# phase = Launch(94); Transit(94); Orbital(94); Return(94); Surface(42)
# planning_method = Traditional(209); AI-Augmented(209)
# planning_time_hours = Time in hours
# contingency_coverage_pct = assuming out of 100

path5 = '/content/drive/MyDrive/Project 2/Aerospace/missions_data.csv'
df5 = pd.read_csv(path5)
df5.head(2) #missions_data
# Contains details of individual missions: agency, type, complexity, duration, and date.

df5.info()

#df5['duration_days'].value_counts()
# mission_id = from M001 to M047
# date = 6 August 2015 - 31 December 2023
# mission_type = ISS Resupply(11); Lunar(11); Mars(10); Deep Space(8); Earth Orbit(7)
# agency = NASA(16); ESA(16); JAXA(15)
# complexity = Low(12), Medium(12), High(12), Critical(11)
# duration_days = from 12 days to 450 days

path6 = '/content/drive/MyDrive/Project 2/Aerospace/phase_contingency_data.csv'
df6 = pd.read_csv(path6)
df6 #phase_contingency_data
# Summarizes contingency coverage by phase using each planning method.

df6.rename(columns={'Phase':'phase'}, inplace=True)
df6

path7 = '/content/drive/MyDrive/Project 2/Aerospace/planning_performance_data.csv'
df7 = pd.read_csv(path7)
df7.head(2) #planning_performance_data
# A detailed breakdown of performance metrics: planning time, contingency, resource use, adaptability, quality, etc., for each mission.

df7.info()

path8 = '/content/drive/MyDrive/Project 2/Aerospace/resource_allocation_data.csv'
df8 = pd.read_csv(path8)
df8.head(2) #resource_allocation_data
# Measures how efficiently different resources (power, crew time, etc.) were used under each planning method.

df8.info()

# df8['resource'].value_counts()
# resource = Power(94); Propellant(94); Bandwidth(94); Crew Time(94)

path9 = '/content/drive/MyDrive/Project 2/Aerospace/resource_optimization_data.csv'
df9 = pd.read_csv(path9)
df9 #resource_optimization_data
# Summarizes resource efficiency (Traditional vs AI) by resource type.

df9.rename(columns={'Resource':'resource'}, inplace=True)
df9

path10 = '/content/drive/MyDrive/Project 2/Aerospace/simulation_scenario_data.csv'
df10 = pd.read_csv(path10)
df10.head(2) #simulation_scenario_data
#Tests both planning methods in different simulated conditions (e.g., system failure, communication loss), comparing improvements in time, contingency, and resource use.

df10.info()

################################################################################################################################################################################

df1['Improvement (%)'] = ((df1['Traditional'] - df1['AI-Augmented']) / df1['Traditional']) * 100
df1['Improvement (%)'] = df1['Improvement (%)'].round(2)
df1

df3['Improvement (%)'] = ((df3['AI-Augmented'] - df3['Traditional']) / df3['Traditional']) * 100
df3['Improvement (%)'] = df3['Improvement (%)'].round(2)
df3

df6['Improvement (%)'] = ((df6['AI-Augmented'] - df6['Traditional']) / df6['Traditional']) * 100
df6['Improvement (%)'] = df6['Improvement (%)'].round(2)
df6

df9['Improvement (%)'] = ((df9['AI-Augmented'] - df9['Traditional']) / df9['Traditional']) * 100
df9['Improvement (%)'] = df9['Improvement (%)'].round(2)
df9

df5.head(2)

mission_counts = df5.groupby(['agency', 'mission_type']).size().unstack(fill_value=0)
mission_counts['Total'] = mission_counts.sum(axis=1)
mission_counts = mission_counts.reset_index()
mission_counts ## Count the number of missions for each mission_type by each agency from august 2015 - december 2023

mission_counts_complex = df5.groupby(['agency', 'mission_type', 'complexity']).size().unstack(fill_value=0)
complexity_order = ['Low', 'Medium', 'High', 'Critical']
mission_counts_complex = mission_counts_complex.reindex(columns=complexity_order, fill_value=0)
mission_counts_complex ## the counts of missions for each mission type by each agency, with the complexity levels

"""**Comparing agencies: esa, jaxa, nasa at complexity: Medium, Mission type: Mars** reason for doing this because only mars mission from all mission type and complexity medium from all complexities in all three agencies"""

filtered_df = df7[(df7['agency'] == 'ESA') &(df7['complexity'] == 'Medium') &(df7['mission_type'] == 'Mars')]
traditional_df = filtered_df[filtered_df['planning_method'] == 'Traditional']
ai_augmented_df = filtered_df[filtered_df['planning_method'] == 'AI-Augmented']
comparison_ESA = pd.DataFrame({
    'Feature': [
        'planning_time_hours',
        'contigency_coverage_pct',
        'resource_efficiency_pct',
        'knowledge_transfer_pct',
        'adaptability_score',
        'quality_assessment'],
    'Traditional': [
        traditional_df['planning_time_hours'].values[0],
        traditional_df['contingency_coverage_pct'].values[0],
        traditional_df['resource_efficiency_pct'].values[0],
        traditional_df['knowledge_transfer_pct'].values[0],
        traditional_df['adaptability_score'].values[0],
        traditional_df['quality_assessment'].values[0]],
    'AI-Augmented': [
        ai_augmented_df['planning_time_hours'].values[0],
        ai_augmented_df['contingency_coverage_pct'].values[0],
        ai_augmented_df['resource_efficiency_pct'].values[0],
        ai_augmented_df['knowledge_transfer_pct'].values[0],
        ai_augmented_df['adaptability_score'].values[0],
        ai_augmented_df['quality_assessment'].values[0]]})

improvements = []
for idx, row in comparison_ESA.iterrows():
    if row['Feature'] == 'planning_time_hours':
        # For planning time: (Traditional - AI) / Traditional * 100
        improvement = (row['Traditional'] - row['AI-Augmented']) / row['Traditional'] * 100
    else:
        # For other features: (AI - Traditional) / Traditional * 100
        improvement = (row['AI-Augmented'] - row['Traditional']) / row['Traditional'] * 100
    improvements.append(improvement)

comparison_ESA['% Improvement'] = improvements
print("Agency: ESA, Complexity: Medium, Mission Type: Mars")
comparison_ESA

filtered_df = df7[(df7['agency'] == 'JAXA') &(df7['complexity'] == 'Medium') &(df7['mission_type'] == 'Mars')]
traditional_df = filtered_df[filtered_df['planning_method'] == 'Traditional']
ai_augmented_df = filtered_df[filtered_df['planning_method'] == 'AI-Augmented']
comparison_JAXA = pd.DataFrame({
    'Feature': [
        'planning_time_hours',
        'contigency_coverage_pct',
        'resource_efficiency_pct',
        'knowledge_transfer_pct',
        'adaptability_score',
        'quality_assessment'],
    'Traditional': [
        traditional_df['planning_time_hours'].values[0],
        traditional_df['contingency_coverage_pct'].values[0],
        traditional_df['resource_efficiency_pct'].values[0],
        traditional_df['knowledge_transfer_pct'].values[0],
        traditional_df['adaptability_score'].values[0],
        traditional_df['quality_assessment'].values[0]],
    'AI-Augmented': [
        ai_augmented_df['planning_time_hours'].values[0],
        ai_augmented_df['contingency_coverage_pct'].values[0],
        ai_augmented_df['resource_efficiency_pct'].values[0],
        ai_augmented_df['knowledge_transfer_pct'].values[0],
        ai_augmented_df['adaptability_score'].values[0],
        ai_augmented_df['quality_assessment'].values[0]]})

improvements = []
for idx, row in comparison_JAXA.iterrows():
    if row['Feature'] == 'planning_time_hours':
        # For planning time: (Traditional - AI) / Traditional * 100
        improvement = (row['Traditional'] - row['AI-Augmented']) / row['Traditional'] * 100
    else:
        # For other features: (AI - Traditional) / Traditional * 100
        improvement = (row['AI-Augmented'] - row['Traditional']) / row['Traditional'] * 100
    improvements.append(improvement)

comparison_JAXA['% Improvement'] = improvements
print("Agency: JAXA, Complexity: Medium, Mission Type: Mars")

comparison_JAXA

filtered_df = df7[(df7['agency'] == 'NASA') &(df7['complexity'] == 'Medium') &(df7['mission_type'] == 'Mars')]
traditional_df = filtered_df[filtered_df['planning_method'] == 'Traditional']
ai_augmented_df = filtered_df[filtered_df['planning_method'] == 'AI-Augmented']
comparison_NASA = pd.DataFrame({
    'Feature': [
        'planning_time_hours',
        'contigency_coverage_pct',
        'resource_efficiency_pct',
        'knowledge_transfer_pct',
        'adaptability_score',
        'quality_assessment'],
    'Traditional': [
        traditional_df['planning_time_hours'].values[0],
        traditional_df['contingency_coverage_pct'].values[0],
        traditional_df['resource_efficiency_pct'].values[0],
        traditional_df['knowledge_transfer_pct'].values[0],
        traditional_df['adaptability_score'].values[0],
        traditional_df['quality_assessment'].values[0]],
    'AI-Augmented': [
        ai_augmented_df['planning_time_hours'].values[0],
        ai_augmented_df['contingency_coverage_pct'].values[0],
        ai_augmented_df['resource_efficiency_pct'].values[0],
        ai_augmented_df['knowledge_transfer_pct'].values[0],
        ai_augmented_df['adaptability_score'].values[0],
        ai_augmented_df['quality_assessment'].values[0]]})

improvements = []
for idx, row in comparison_NASA.iterrows():
    if row['Feature'] == 'planning_time_hours':
        # For planning time: (Traditional - AI) / Traditional * 100
        improvement = (row['Traditional'] - row['AI-Augmented']) / row['Traditional'] * 100
    else:
        # For other features: (AI - Traditional) / Traditional * 100
        improvement = (row['AI-Augmented'] - row['Traditional']) / row['Traditional'] * 100
    improvements.append(improvement)

comparison_NASA['% Improvement'] = improvements

print("Agency: NASA, Complexity: Medium, Mission Type: Mars")
comparison_NASA

combined_improvement = pd.DataFrame({'Feature': comparison_ESA['Feature'],'ESA': comparison_ESA['% Improvement'].round(2),
'JAXA': comparison_JAXA['% Improvement'].round(2),'NASA': comparison_NASA['% Improvement'].round(2)})

print("Percentage Improvement Comparison Across Agencies at Complexity: Medium and Mission Type: Mars")
combined_improvement

combined_improvement = pd.DataFrame({'Feature': comparison_ESA['Feature'],'ESA': comparison_ESA['% Improvement'].round(2),'JAXA': comparison_JAXA['% Improvement'].round(2),'NASA': comparison_NASA['% Improvement'].round(2)})
combined_improvement.set_index('Feature', inplace=True)
fig, ax = plt.subplots(figsize=(10, 6))
combined_improvement.plot(kind='bar', ax=ax)

ax.set_ylabel('% Improvement (AI vs Traditional)')
ax.set_xlabel('Performance Feature')
ax.set_title('Percentage Improvement of Planning after using AI-Augmented Method (Medium Complexity, Mars Mission)')
ax.legend(title='Agency')
ax.grid(axis='y', linestyle='--')
plt.xticks(rotation=45, ha='right')
plt.tight_layout()

plt.show()

combined_AI_Augmented = pd.DataFrame({'Feature': comparison_ESA['Feature'],'ESA': comparison_ESA['AI-Augmented'].round(2),'JAXA': comparison_JAXA['AI-Augmented'].round(2),'NASA': comparison_NASA['AI-Augmented'].round(2)})

print("AI-Augmented Method Comparison Across Agencies at Complexity: Medium and Mission Type: Mars")
combined_AI_Augmented

combined_AI_Augmented = pd.DataFrame({'Feature': comparison_ESA['Feature'],'ESA': comparison_ESA['AI-Augmented'].round(2),'JAXA': comparison_JAXA['AI-Augmented'].round(2),'NASA': comparison_NASA['AI-Augmented'].round(2)})
combined_AI_Augmented.set_index('Feature', inplace=True)
fig, ax = plt.subplots(figsize=(10, 6))
combined_AI_Augmented.plot(kind='bar', ax=ax)

ax.set_ylabel('AI-Augmented Method Value')
ax.set_xlabel('Performance Feature')
ax.set_title('AI-Augmented Method Comparison Across Agencies (Medium Complexity, Mars Mission)')
ax.legend(title='Agency')
ax.grid(axis='y', linestyle='--')

plt.xticks(rotation=45, ha='right')
plt.tight_layout()

plt.show()

combined_traditional = pd.DataFrame({'Feature': comparison_ESA['Feature'],'ESA': comparison_ESA['Traditional'].round(2),'JAXA': comparison_JAXA['Traditional'].round(2),'NASA': comparison_NASA['Traditional'].round(2)})

print("Traditional Method Comparison Across Agencies at Complexity: Medium and Mission Type: Mars")
combined_traditional

combined_traditional = pd.DataFrame({'Feature': comparison_ESA['Feature'],'ESA': comparison_ESA['Traditional'].round(2),'JAXA': comparison_JAXA['Traditional'].round(2),'NASA': comparison_NASA['Traditional'].round(2)})
combined_traditional.set_index('Feature', inplace=True)
fig, ax = plt.subplots(figsize=(10, 6))
combined_traditional.plot(kind='bar', ax=ax)
ax.set_ylabel('Traditional Method Value')
ax.set_xlabel('Performance Feature')
ax.set_title('Traditional Method Comparison Across Agencies (Medium Complexity, Mars Mission)')
ax.legend(title='Agency')
ax.grid(axis='y', linestyle='--')
plt.xticks(rotation=45, ha='right')
plt.tight_layout()

plt.show()

"""**Use following table final for Comparing agencies: esa, jaxa, nasa at complexity: Medium, Mission type: Mars.**"""

#### USE THIS FINAL

combined_final = pd.DataFrame({
    'Feature': comparison_ESA['Feature'],'ESA_Trad': comparison_ESA['Traditional'].round(2),'JAXA_Trad': comparison_JAXA['Traditional'].round(2),
'NASA_Trad': comparison_NASA['Traditional'].round(2), 'ESA_%improvement': comparison_ESA['% Improvement'].round(2),'JAXA_%improvement': comparison_JAXA['% Improvement'].round(2),'NASA_%improvement': comparison_NASA['% Improvement'].round(2)})

print("Traditional Values and % Improvement Using AI-Augmented Method Across Agencies at Complexity: Medium and Mission Type: Mars")
display(combined_final)

"""**Use this table final as another example to get approximation understanding that ai_augmented improved performance or not**"""

#### merged df4 and df5

# Merge df4 and df5 on 'mission_id'
merged_df4_df5 = pd.merge(df4, df5, on='mission_id', how='inner')

print("Merged Data: mission_phase_data + missions_data")
display(merged_df4_df5.head())

filtered_phase_data = merged_df4_df5[(merged_df4_df5['agency'] == 'ESA') &(merged_df4_df5['complexity'] == 'Medium') &(merged_df4_df5['mission_type'] == 'Mars')]

traditional_phase = filtered_phase_data[filtered_phase_data['planning_method'] == 'Traditional'][['phase', 'planning_time_hours']]
ai_phase = filtered_phase_data[filtered_phase_data['planning_method'] == 'AI-Augmented'][['phase', 'planning_time_hours']]
comparison_phase_ESA = pd.merge(traditional_phase, ai_phase, on='phase', suffixes=('_Traditional', '_AI'))

comparison_phase_ESA['planning_time_%Improvement'] = ((comparison_phase_ESA['planning_time_hours_Traditional'] - comparison_phase_ESA['planning_time_hours_AI']) / comparison_phase_ESA['planning_time_hours_Traditional']) * 100
comparison_phase_ESA['planning_time_%Improvement'] = comparison_phase_ESA['planning_time_%Improvement'].round(2)  # Round for clean view

print("Agency: ESA | Complexity: Medium | Mission Type: Mars | Phase-wise Traditional vs AI vs % Improvement")
display(comparison_phase_ESA)

filtered_phase_data = merged_df4_df5[ (merged_df4_df5['agency'] == 'ESA') & (merged_df4_df5['complexity'] == 'Medium') & (merged_df4_df5['mission_type'] == 'Mars')]
traditional_phase = filtered_phase_data[filtered_phase_data['planning_method'] == 'Traditional'][['phase', 'contingency_coverage_pct']]
ai_phase = filtered_phase_data[filtered_phase_data['planning_method'] == 'AI-Augmented'][['phase', 'contingency_coverage_pct']]

comparison_phase_ESA1 = pd.merge(traditional_phase, ai_phase, on='phase', suffixes=('_Traditional', '_AI'))

comparison_phase_ESA1['contingency_coverage_%Improvement'] = ((comparison_phase_ESA1['contingency_coverage_pct_AI'] - comparison_phase_ESA1['contingency_coverage_pct_Traditional']) / comparison_phase_ESA1['contingency_coverage_pct_Traditional']) * 100
comparison_phase_ESA1['contingency_coverage_%Improvement'] = comparison_phase_ESA1['contingency_coverage_%Improvement'].round(2)  # Round for clean view
print("Agency: ESA | Complexity: Medium | Mission Type: Mars | Phase-wise Traditional vs AI vs % Improvement")
display(comparison_phase_ESA1)

filtered_phase_data = merged_df4_df5[  (merged_df4_df5['agency'] == 'JAXA') &  (merged_df4_df5['complexity'] == 'Medium') & (merged_df4_df5['mission_type'] == 'Mars')]

traditional_phase = filtered_phase_data[filtered_phase_data['planning_method'] == 'Traditional'][['phase', 'planning_time_hours']]
ai_phase = filtered_phase_data[filtered_phase_data['planning_method'] == 'AI-Augmented'][['phase', 'planning_time_hours']]
comparison_phase_JAXA = pd.merge(traditional_phase, ai_phase, on='phase', suffixes=('_Traditional', '_AI'))
comparison_phase_JAXA['planning_time_%Improvement'] = ((comparison_phase_JAXA['planning_time_hours_Traditional'] - comparison_phase_JAXA['planning_time_hours_AI']) / comparison_phase_JAXA['planning_time_hours_Traditional']) * 100
comparison_phase_JAXA['planning_time_%Improvement'] = comparison_phase_JAXA['planning_time_%Improvement'].round(2)  # Round for clean view
print("Agency: JAXA | Complexity: Medium | Mission Type: Mars | Phase-wise Traditional vs AI vs % Improvement")
display(comparison_phase_JAXA)

filtered_phase_data = merged_df4_df5[  (merged_df4_df5['agency'] == 'JAXA') & (merged_df4_df5['complexity'] == 'Medium') &(merged_df4_df5['mission_type'] == 'Mars')]

traditional_phase = filtered_phase_data[filtered_phase_data['planning_method'] == 'Traditional'][['phase', 'contingency_coverage_pct']]
ai_phase = filtered_phase_data[filtered_phase_data['planning_method'] == 'AI-Augmented'][['phase', 'contingency_coverage_pct']]
comparison_phase_JAXA1 = pd.merge(traditional_phase, ai_phase, on='phase', suffixes=('_Traditional', '_AI'))

comparison_phase_JAXA1['contingency_coverage_%Improvement'] = ((comparison_phase_JAXA1['contingency_coverage_pct_AI'] - comparison_phase_JAXA1['contingency_coverage_pct_Traditional']) / comparison_phase_JAXA1['contingency_coverage_pct_Traditional']) * 100
comparison_phase_JAXA1['contingency_coverage_%Improvement'] = comparison_phase_JAXA1['contingency_coverage_%Improvement'].round(2)  # Round for clean view

print("Agency: JAXA | Complexity: Medium | Mission Type: Mars | Phase-wise Traditional vs AI vs % Improvement")
display(comparison_phase_JAXA1)

filtered_phase_data = merged_df4_df5[ (merged_df4_df5['agency'] == 'NASA') &(merged_df4_df5['complexity'] == 'Medium') &(merged_df4_df5['mission_type'] == 'Mars')]
traditional_phase = filtered_phase_data[filtered_phase_data['planning_method'] == 'Traditional'][['phase', 'planning_time_hours']]
ai_phase = filtered_phase_data[filtered_phase_data['planning_method'] == 'AI-Augmented'][['phase', 'planning_time_hours']]
comparison_phase_NASA = pd.merge(traditional_phase, ai_phase, on='phase', suffixes=('_Traditional', '_AI'))

comparison_phase_NASA['planning_time_%Improvement'] = ((comparison_phase_NASA['planning_time_hours_Traditional'] - comparison_phase_NASA['planning_time_hours_AI']) / comparison_phase_NASA['planning_time_hours_Traditional']) * 100
comparison_phase_NASA['planning_time_%Improvement'] = comparison_phase_NASA['planning_time_%Improvement'].round(2)  # Round for clean view
print("Agency: NASA | Complexity: Medium | Mission Type: Mars | Phase-wise Traditional vs AI vs % Improvement")
display(comparison_phase_NASA)

filtered_phase_data = merged_df4_df5[ (merged_df4_df5['agency'] == 'NASA') & (merged_df4_df5['complexity'] == 'Medium') &(merged_df4_df5['mission_type'] == 'Mars')]

traditional_phase = filtered_phase_data[filtered_phase_data['planning_method'] == 'Traditional'][['phase', 'contingency_coverage_pct']]
ai_phase = filtered_phase_data[filtered_phase_data['planning_method'] == 'AI-Augmented'][['phase', 'contingency_coverage_pct']]

comparison_phase_NASA1 = pd.merge(traditional_phase, ai_phase, on='phase', suffixes=('_Traditional', '_AI'))

comparison_phase_NASA1['contingency_coverage_%Improvement'] = ((comparison_phase_NASA1['contingency_coverage_pct_AI'] - comparison_phase_NASA1['contingency_coverage_pct_Traditional']) / comparison_phase_NASA1['contingency_coverage_pct_Traditional']) * 100
comparison_phase_NASA1['contingency_coverage_%Improvement'] = comparison_phase_NASA1['contingency_coverage_%Improvement'].round(2)  # Round for clean view

print("Agency: NASA | Complexity: Medium | Mission Type: Mars | Phase-wise Traditional vs AI vs % Improvement")
display(comparison_phase_NASA1)

"""**All agency comparison | complexity: Medium | Mission Type: Mars | Feature: Planning time | All phases**"""

# Merge the two tables side-by-side on 'Feature'
combined_ESA_JAXA_NASA = pd.DataFrame({'phase': comparison_phase_ESA['phase'], 'ESA_Trad': comparison_phase_ESA['planning_time_hours_Traditional'],
 'JAXA_Trad': comparison_phase_JAXA['planning_time_hours_Traditional'],
'NASA_Trad': comparison_phase_NASA['planning_time_hours_Traditional'],
'ESA_%improvement': comparison_phase_ESA['planning_time_%Improvement'],
'JAXA_%improvement': comparison_phase_JAXA['planning_time_%Improvement'],
'NASA_%improvement': comparison_phase_NASA['planning_time_%Improvement']})

print("All agencies | Mars Missions | Planning Time Feature | Comparison of Traditional and % Improvement using AI-Augmented Method")
display(combined_ESA_JAXA_NASA)

"""**All agency comparison | complexity: Medium | Mission Type: Mars | Feature: Contingency Coverage | All phases**"""

combined_ESA1_JAXA1_NASA1 = pd.DataFrame({  'phase': comparison_phase_ESA1['phase'], 'ESA_Trad': comparison_phase_ESA1['contingency_coverage_pct_Traditional'],
'JAXA_Trad': comparison_phase_JAXA1['contingency_coverage_pct_Traditional'], 'NASA_Trad': comparison_phase_NASA1['contingency_coverage_pct_Traditional'], 'ESA_%improvement': comparison_phase_ESA1['contingency_coverage_%Improvement'],
'JAXA_%improvement': comparison_phase_JAXA1['contingency_coverage_%Improvement'], 'NASA_%improvement': comparison_phase_NASA1['contingency_coverage_%Improvement']})

print("All agencies | Mars Missions | Contingency Coverage Feature | Comparison of Traditional and % Improvement using AI-Augmented Method")
display(combined_ESA1_JAXA1_NASA1)

## merge df5 and df8

# Merge df4 and df5 on 'mission_id'
merged_df5_df8 = pd.merge(df5, df8, on='mission_id', how='inner')
print("Merged Data: mission_phase_data + missions_data")
display(merged_df5_df8.head(1))

filtered_resource_data = merged_df5_df8[ (merged_df5_df8['agency'] == 'ESA') & (merged_df5_df8['complexity'] == 'Medium') &(merged_df5_df8['mission_type'] == 'Mars')]

traditional_resource = filtered_resource_data[filtered_resource_data['planning_method'] == 'Traditional'][['resource', 'efficiency_pct']]
ai_resource = filtered_resource_data[filtered_resource_data['planning_method'] == 'AI-Augmented'][['resource', 'efficiency_pct']]
comparison_resource_ESA = pd.merge(traditional_resource, ai_resource, on='resource', suffixes=('_Traditional', '_AI'))
comparison_resource_ESA['efficiency_%Improvement'] = ((comparison_resource_ESA['efficiency_pct_AI'] - comparison_resource_ESA['efficiency_pct_Traditional']) / comparison_resource_ESA['efficiency_pct_Traditional']) * 100
comparison_resource_ESA['efficiency_%Improvement'] = comparison_resource_ESA['efficiency_%Improvement'].round(2)  # Round for clean view

print("Agency: ESA | Complexity: Medium | Mission Type: Mars | resource-wise Traditional vs AI vs % Improvement")
display(comparison_resource_ESA)

filtered_resource_data = merged_df5_df8[(merged_df5_df8['agency'] == 'JAXA') &(merged_df5_df8['complexity'] == 'Medium') &(merged_df5_df8['mission_type'] == 'Mars')]

traditional_resource = filtered_resource_data[filtered_resource_data['planning_method'] == 'Traditional'][['resource', 'efficiency_pct']]
ai_resource = filtered_resource_data[filtered_resource_data['planning_method'] == 'AI-Augmented'][['resource', 'efficiency_pct']]
comparison_resource_JAXA = pd.merge(traditional_resource, ai_resource, on='resource', suffixes=('_Traditional', '_AI'))
comparison_resource_JAXA['efficiency_%Improvement'] = ((comparison_resource_JAXA['efficiency_pct_AI'] - comparison_resource_JAXA['efficiency_pct_Traditional']) / comparison_resource_JAXA['efficiency_pct_Traditional']) * 100
comparison_resource_JAXA['efficiency_%Improvement'] = comparison_resource_JAXA['efficiency_%Improvement'].round(2)  # Round for clean view

print("Agency: JAXA | Complexity: Medium | Mission Type: Mars | resource-wise Traditional vs AI vs % Improvement")
display(comparison_resource_JAXA)

filtered_resource_data = merged_df5_df8[ (merged_df5_df8['agency'] == 'NASA') & (merged_df5_df8['complexity'] == 'Medium') &(merged_df5_df8['mission_type'] == 'Mars')]

traditional_resource = filtered_resource_data[filtered_resource_data['planning_method'] == 'Traditional'][['resource', 'efficiency_pct']]
ai_resource = filtered_resource_data[filtered_resource_data['planning_method'] == 'AI-Augmented'][['resource', 'efficiency_pct']]
comparison_resource_NASA = pd.merge(traditional_resource, ai_resource, on='resource', suffixes=('_Traditional', '_AI'))

comparison_resource_NASA['efficiency_%Improvement'] = ((comparison_resource_NASA['efficiency_pct_AI'] - comparison_resource_NASA['efficiency_pct_Traditional']) / comparison_resource_NASA['efficiency_pct_Traditional']) * 100
comparison_resource_NASA['efficiency_%Improvement'] = comparison_resource_NASA['efficiency_%Improvement'].round(2)  # Round for clean view

print("Agency: NASA | Complexity: Medium | Mission Type: Mars | resource-wise Traditional vs AI vs % Improvement")
display(comparison_resource_NASA)

"""**All agency comparison | complexity: Medium | Mission Type: Mars | Feature: resources**


"""

combinedd_ESA_JAXA_NASA = pd.DataFrame({ 'resource': comparison_resource_ESA['resource'], 'ESA_Trad': comparison_resource_ESA['efficiency_pct_Traditional'], 'JAXA_Trad': comparison_resource_JAXA['efficiency_pct_Traditional'], 'NASA_Trad': comparison_resource_NASA['efficiency_pct_Traditional'], 'ESA_%improvement': comparison_resource_ESA['efficiency_%Improvement'], 'JAXA_%improvement': comparison_resource_JAXA['efficiency_%Improvement'], 'NASA_%improvement': comparison_resource_NASA['efficiency_%Improvement']})

print("All agencies | Mars Missions | resource Feature | Comparison of Traditional and % Improvement using AI-Augmented Method")
display(combinedd_ESA_JAXA_NASA)

"""**Time Trend — AI Only (Three Separate Graphs)**"""

df7['date'] = pd.to_datetime(df7['date'])

df7['year'] = df7['date'].dt.year
df7_ai_only = df7[
    (df7['year'] >= 2015) & (df7['year'] <= 2023) &
    (df7['planning_method'] == 'AI-Augmented')
]

ai_trend_summary = df7_ai_only.groupby('year').agg({ 'planning_time_hours': 'mean', 'quality_assessment': 'mean','knowledge_transfer_pct': 'mean','contingency_coverage_pct': 'mean','resource_efficiency_pct': 'mean','adaptability_score': 'mean'}).round(2).reset_index()

# --- Plot 1: Planning Time Hours ---
plt.figure(figsize=(10,6))
sns.lineplot(data=ai_trend_summary, x='year',y='planning_time_hours', marker='o',color='royalblue')
plt.title('AI-Augmented: Planning Time Hours Trend (2015-2023)')
plt.ylabel('Planning Time (Hours)')
plt.xlabel('Year')
plt.grid(True)
plt.show()

# --- Plot 2: Quality Assessment ---
plt.figure(figsize=(10,6))
sns.lineplot(  data=ai_trend_summary,  x='year', y='quality_assessment', marker='o', color='seagreen')
plt.title('AI-Augmented: Quality Assessment Trend (2015-2023)')
plt.ylabel('Quality Assessment Score')
plt.xlabel('Year')
plt.grid(True)
plt.show()

# --- Plot 3: Knowledge Transfer Percentage ---
plt.figure(figsize=(10,6))
sns.lineplot(  data=ai_trend_summary,  x='year', y='knowledge_transfer_pct', marker='o', color='darkorange')
plt.title('AI-Augmented: Knowledge Transfer Percentage Trend (2015-2023)')
plt.ylabel('Knowledge Transfer (%)')
plt.xlabel('Year')
plt.grid(True)
plt.show()

# --- Plot 4: Contingency Coverage Percentage ---
plt.figure(figsize=(10,6))
sns.lineplot(  data=ai_trend_summary, x='year',  y='contingency_coverage_pct', marker='o', color='pink')
plt.title('AI-Augmented: contingency coverage Percentage Trend (2015-2023)')
plt.ylabel('contingency coverage (%)')
plt.xlabel('Year')
plt.grid(True)
plt.show()

# --- Plot 5: Resource Efficiency Percentage ---
plt.figure(figsize=(10,6))
sns.lineplot( data=ai_trend_summary, x='year', y='resource_efficiency_pct', marker='o', color='Black')
plt.title('AI-Augmented: Resource Efficiency Percentage Trend (2015-2023)')
plt.ylabel('Resource Efficiency (%)')
plt.xlabel('Year')
plt.grid(True)
plt.show()

# --- Plot 6: adaptability_score Percentage ---
plt.figure(figsize=(10,6))
sns.lineplot(  data=ai_trend_summary, x='year',y='adaptability_score', marker='o',color='brown'
)
plt.title('AI-Augmented: Adaptability Score Percentage Trend (2015-2023)')
plt.ylabel('Adaptability Score')
plt.xlabel('Year')
plt.grid(True)
plt.show()

df7.head(1)

"""# **df10**"""

df_melted = pd.melt( df10, id_vars=['scenario_type', 'complexity'], value_vars=['trad_planning_time', 'ai_planning_time', 'trad_contingency_coverage', 'ai_contingency_coverage',  'trad_resource_efficiency', 'ai_resource_efficiency' ], var_name='Metric',value_name='Value')

df_melted['Method'] = df_melted['Metric'].apply(lambda x: 'Traditional' if 'trad' in x else 'AI-Augmented')
df_melted['Feature'] = df_melted['Metric'].apply(
    lambda x: 'Planning Time' if 'planning_time' in x else
              'Contingency Coverage' if 'contingency_coverage' in x else
              'Resource Efficiency')
sns.set(style="whitegrid")
features = ['Planning Time', 'Contingency Coverage', 'Resource Efficiency']

for feature in features:
    plt.figure(figsize=(14, 6))
    feature_data = df_melted[df_melted['Feature'] == feature]
    sns.barplot( data=feature_data, x='scenario_type',  y='Value', hue='Method', ci=None)

    plt.title(f'{feature} Comparison (Traditional vs AI) by Scenario Type', fontsize=16)
    plt.xlabel('Scenario Type', fontsize=14)
    plt.ylabel(f'{feature} Value', fontsize=14)
    plt.xticks(rotation=45, ha='right')
    plt.legend(title='Method')
    plt.tight_layout()
    plt.show()

for feature in features:
    plt.figure(figsize=(14, 6))
    feature_data = df_melted[df_melted['Feature'] == feature]
    sns.barplot(  data=feature_data, x='complexity',  y='Value', hue='Method',  ci=None)

    plt.title(f'{feature} Comparison (Traditional vs AI) by Complexity Level', fontsize=16)
    plt.xlabel('Complexity Level', fontsize=14)
    plt.ylabel(f'{feature} Value', fontsize=14)
    plt.legend(title='Method')
    plt.tight_layout()
    plt.show()

####################### Expert Analysis ##########################################

role_based_avg = df2.groupby('role')[['traditional_rating', 'ai_rating', 'perceived_improvement_pct']].mean().reset_index()

print("Average Ratings and Improvement Percentage per Role:")
role_based_avg

most_improvement_role = role_based_avg.loc[role_based_avg['perceived_improvement_pct'].idxmax(), 'role']
print(f"\nRole perceiving the most improvement from AI: {most_improvement_role}")

least_improvement_role = role_based_avg.loc[role_based_avg['perceived_improvement_pct'].idxmin(), 'role']
print(f"\nRole perceiving the least improvement from AI: {least_improvement_role}")

agency_based_avg = df2.groupby('agency')[['traditional_rating', 'ai_rating', 'perceived_improvement_pct']].mean().reset_index()

print("Average Ratings and Improvement Percentage per Agency:")
agency_based_avg

most_improvement_agency = agency_based_avg.loc[agency_based_avg['perceived_improvement_pct'].idxmax(), 'agency']
print(f"\nAgency whose experts feel the biggest improvement with AI: {most_improvement_agency}")

experience_based_avg = df2.groupby('experience')[['traditional_rating', 'ai_rating', 'perceived_improvement_pct']].mean().reset_index()

print("Average Ratings and Improvement Percentage per Experience Level:")
experience_based_avg

highest_ai_rating_experience = experience_based_avg.loc[experience_based_avg['ai_rating'].idxmax(), 'experience']
print(f"\nExperience group rating AI the highest: {highest_ai_rating_experience}")

highest_improvement_experience = experience_based_avg.loc[experience_based_avg['perceived_improvement_pct'].idxmax(), 'experience']
print(f"Experience group perceiving the most improvement with AI: {highest_improvement_experience}")