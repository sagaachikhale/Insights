# -*- coding: utf-8 -*-
"""Project1Aerospace.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1NQ6y09BKybTB8uDBL8aN7NlIIoH3Gg_t
"""

import numpy as np
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
import warnings
warnings.filterwarnings('ignore')

path = '/content/drive/MyDrive/Project 1/Aerospace/Global_Space_Exploration_Dataset.csv'
df = pd.read_csv(path)

df.head(2)

df.info()

df = df.rename(columns={'Budget (in Billion $)': 'Mission Budget (in Billion $)'}) #renaming column name
df.head(2)

df.describe()

df.describe(include='object')

df['Country'].value_counts() # total mentioned countries

df['Satellite Type'].value_counts() # total mentioned Satellite Type

df['Technology Used'].value_counts() # total mentioned Technology Used

# new column 'Num_Collaborators' by counting the countries
df['Num_Collaborators'] = df['Collaborating Countries'].apply(lambda x: len([i.strip() for i in str(x).split(',')]) if pd.notna(x) else 0)
#
print(df[['Collaborating Countries', 'Num_Collaborators']].head())

# First, split and clean
df['Collab_List'] = df['Collaborating Countries'].apply(lambda x: [i.strip() for i in str(x).split(',')] if pd.notna(x) else [])

# Explode the list into multiple rows
df_exploded = df.explode('Collab_List')

# Optional: Rename for clarity
df_exploded = df_exploded.rename(columns={'Collab_List': 'Collab_Country'})

# View exploded format
print(df_exploded[['Year', 'Mission Name', 'Collab_Country']].head())

# STEP 1: Missions where China is the main country
china_primary = df[df['Country'] == 'China'][['Year', 'Mission Name']]

# STEP 2: Missions where China is a collaborator (from exploded dataframe)
china_collab = df_exploded[df_exploded['Collab_Country'] == 'China'][['Year', 'Mission Name']]

# STEP 3: Combine both and drop duplicate missions (just in case)
china_all_missions = pd.concat([china_primary, china_collab]).drop_duplicates()

# STEP 4: Count number of missions per year
china_missions_by_year = china_all_missions.groupby('Year').size().reset_index(name='Mission_Count')

# STEP 5: Plot
plt.figure(figsize=(10, 5))
plt.plot(china_missions_by_year['Year'], china_missions_by_year['Mission_Count'], marker='o', color='red')
plt.title("China's Total Space Mission Involvement (2000–2025)")
plt.xlabel('Year')
plt.ylabel('Number of Missions')
plt.grid(True)
plt.xticks(range(2000, 2026, 2))
plt.tight_layout()
plt.show()

import plotly.graph_objects as go
from plotly.subplots import make_subplots

# List of top countries to visualize
top_countries = ['China', 'UK', 'Israel', 'France', 'UAE', 'USA', 'India', 'Japan', 'Russia', 'Germany']

# Prepare subplot grid (2 rows, 5 columns)
fig = make_subplots(
    rows=2, cols=5,
    subplot_titles=top_countries,
    shared_yaxes=True,
    horizontal_spacing=0.05,
    vertical_spacing=0.15
)

# Create all country plots
row, col = 1, 1

for country in top_countries:
    # Filter missions where the country is either main or collaborator
    main_missions = df[df['Country'] == country][['Year', 'Mission Name']]
    collab_missions = df_exploded[df_exploded['Collab_Country'] == country][['Year', 'Mission Name']]

    # Combine and count
    all_missions = pd.concat([main_missions, collab_missions]).drop_duplicates()
    missions_by_year = all_missions.groupby('Year').size().reset_index(name='Mission_Count')

    # Add trace to subplot
    fig.add_trace(
        go.Scatter(
            x=missions_by_year['Year'],
            y=missions_by_year['Mission_Count'],
            mode='lines+markers',
            name=country,
            hovertemplate='Year: %{x}<br>Missions: %{y}<extra></extra>'
        ),
        row=row, col=col
    )

    # Move to next subplot
    col += 1
    if col > 5:
        col = 1
        row += 1

# Layout tweaks
fig.update_layout(
    height=800,
    width=1400,
    title_text="Top 10 Countries – Space Mission Involvement (2000–2025)",
    showlegend=False,
    template="plotly_white"
)

# Show chart
fig.show()

# Initialize a list to store the total missions for each country
country_missions = []

# Loop through the top countries
for country in top_countries:
    # Filter missions where the country is either the lead or a collaborator
    main_missions = df[df['Country'] == country]
    collab_missions = df_exploded[df_exploded['Collab_Country'] == country]

    # Count missions
    total_missions = len(main_missions) + len(collab_missions)

    # Append to the list
    country_missions.append((country, total_missions))

# Create a DataFrame to show the results in table format
missions_table = pd.DataFrame(country_missions, columns=['Country', 'Total Missions'])

# Display the table
missions_table

# STEP 1: Count missions where the country is the main/leading country
main_country_counts = df['Country'].value_counts().reset_index()
main_country_counts.columns = ['Country', 'Mission_Count']

# STEP 2: Create a bar chart
fig = px.bar(
    main_country_counts,
    x='Country',
    y='Mission_Count',
    title='Number of Missions Led by Each Country (Excluding Collaborations)',
    labels={'Country': 'Country', 'Mission_Count': 'Number of Missions (Lead Only)'},
    color='Mission_Count',
    color_continuous_scale='Tealgrn'
)

# STEP 3: Graph styling
fig.update_layout(
    xaxis_tickangle=45,
    template='plotly_white',
    showlegend=False,
    title_font=dict(size=20)
)

# STEP 4: Show the plot
fig.show()

# STEP 1: Use the exploded dataframe to count collaboration appearances
collab_counts = df_exploded['Collab_Country'].value_counts().reset_index()
collab_counts.columns = ['Country', 'Collaboration_Count']


# STEP 2: Create the bar chart
fig = px.bar(
    collab_counts,
    x='Country',
    y='Collaboration_Count',
    title='Top Collaborating Countries in Space Missions (2000–2025)',
    labels={'Country': 'Country', 'Collaboration_Count': 'Times Participated as Collaborator'},
    color='Collaboration_Count',
    color_continuous_scale='Blues'  # Optional: try 'Plasma', 'Viridis', etc.
)

# STEP 3: Style the graph
fig.update_layout(
    xaxis_tickangle=45,
    template='plotly_white',
    showlegend=False,
    title_font=dict(size=20)
)

# STEP 4: Show the chart
fig.show()

# Cross checking the collab countries count
# Count how many times China appeared as a collaborator
china_collab_count = df_exploded['Collab_Country'].value_counts().get('China', 0)

print(f"China has appeared as a collaborating country in {china_collab_count} missions.")

# Step 1: Filter the data based on the number of collaborators (1, 2, 3)
mission_counts_by_collaborators = df[df['Num_Collaborators'].isin([1, 2, 3])]

# Step 2: Group by the number of collaborators and count the missions
mission_count_by_collab = mission_counts_by_collaborators.groupby('Num_Collaborators').size().reset_index(name='Mission Count')

# Step 3: Create the bar chart to visualize the mission count by number of collaborators
fig = px.bar(
    mission_count_by_collab,
    x='Num_Collaborators',
    y='Mission Count',
    title='Mission Count by Number of Collaborators',
    labels={
        'Num_Collaborators': 'Number of Collaborators',
        'Mission Count': 'Number of Missions'
    },
    height=600
)

# Step 4: Update layout for better readability
fig.update_layout(
    template='plotly_white',
    title_font=dict(size=20),
    xaxis_title='Number of Collaborators',
    yaxis_title='Number of Missions',
    showlegend=False,
    hovermode='x unified'
)

# Show plot
fig.show()

from collections import defaultdict

# Step 1: Filter for missions with 1, 2, or 3 collaborators
filtered_df = df[df['Num_Collaborators'].isin([1, 2, 3])]

# Step 2: Explode the collaborating countries
filtered_df['Collab_List'] = filtered_df['Collaborating Countries'].apply(
    lambda x: [i.strip() for i in str(x).split(',')] if pd.notna(x) else []
)
df_exploded = filtered_df.explode('Collab_List')

# Step 3: Group and count frequency of each country as collaborator by Num_Collaborators
collab_counts = df_exploded.groupby(['Collab_List', 'Num_Collaborators']).size().unstack(fill_value=0)

# Step 4: Clean up the table
collab_counts.columns.name = 'Num_Collaborators'
collab_counts.index.name = 'Country'
collab_counts = collab_counts.sort_index()

# View result
print(collab_counts)

# Step 1: Group by Num_Collaborators and Success Rate, then count missions
success_dist = df.groupby(['Num_Collaborators', 'Success Rate (%)']).size().reset_index(name='Count')

# Step 2: Plot interactive line chart
fig = px.line(
    success_dist,
    x='Success Rate (%)',
    y='Count',
    color='Num_Collaborators',
    markers=True,
    title='Mission Success Rate Distribution by Number of Collaborating Countries',
    labels={
        'Success Rate (%)': 'Success Rate (%)',
        'Count': 'Number of Missions',
        'Num_Collaborators': 'Number of Collaborators'
    }
)

# Optional layout improvements
fig.update_layout(
    template='plotly_white',
    title_font=dict(size=20),
    xaxis=dict(dtick=5),
    yaxis_title='Mission Count',
    hovermode='x unified'
)

fig.show()

# Create a pivot table
pivot_table = df.pivot_table(
    index='Num_Collaborators',
    columns='Success Rate (%)',
    values='Mission Name',  # or any column with no nulls
    aggfunc='count',
    fill_value=0
)

# Optional: sort columns and index for neatness
pivot_table = pivot_table.sort_index().sort_index(axis=1)

# Display the pivot table
pivot_table

# Step 1: Filter for collaborators 1, 2, and 3
filtered_df = df[df['Num_Collaborators'].isin([1, 2, 3])]

# Step 2: Create a pivot table of Success Rate (%) counts
success_table = filtered_df.pivot_table(
    index='Num_Collaborators',
    columns='Success Rate (%)',
    values='Mission Name',  # You can use any column just to count
    aggfunc='count',
    fill_value=0
)

# Step 3: Add a 'Total' column
success_table['Total'] = success_table.sum(axis=1)

# Step 4: Optional – sort by collaborator count
success_table = success_table.sort_index()

# Step 5: Display table
success_table

# Step 1: Filter for Success Rates 90% to 100%
df_90plus = df[df['Success Rate (%)'] >= 90]

# Step 2: Create a pivot table: rows = Num_Collaborators, columns = Success Rate (%), values = count of missions
pivot_90plus = df_90plus.pivot_table(
    index='Num_Collaborators',
    columns='Success Rate (%)',
    values='Mission Name',  # or any column, we just need count
    aggfunc='count',
    fill_value=0
)

# Step 3: Add a 'Total' column
pivot_90plus['Total'] = pivot_90plus.sum(axis=1)

# Step 4: Optional — sort by number of collaborators
pivot_90plus = pivot_90plus.sort_index()

# Step 5: Display the table
pivot_90plus

# Step 1: Create a consistent set of collaborating countries including the main country
def get_collab_group(row):
    collab = [c.strip() for c in str(row['Collaborating Countries']).split(',') if c.strip()]
    all_countries = list(set([row['Country']] + collab))  # remove duplicates
    return ', '.join(sorted(all_countries))  # sorted to make grouping consistent

# Step 2: Apply to dataframe
df['Collaboration_Group'] = df.apply(get_collab_group, axis=1)

# Step 3: Count the frequency of each unique group
group_counts = df['Collaboration_Group'].value_counts().reset_index()
group_counts.columns = ['Collaboration_Group', 'Count']

# Step 4: Show top N most common collaboration groups
group_counts.head(10)

a = group_counts.tail(10).reset_index()
a = a.drop(columns=['index'])
a

# Step 1: Use existing Collaboration_Group column and get top 10
top_collab_groups = df['Collaboration_Group'].value_counts().head(10).index.tolist()

# Step 2: Filter the main DataFrame to include only those top collaboration groups
top_collab_df = df[df['Collaboration_Group'].isin(top_collab_groups)]

# Step 3: Filter for missions with Success Rate ≥ 90%
successful_missions = top_collab_df[top_collab_df['Success Rate (%)'] >= 90]

# Step 4: Group by Collaboration Group and count how many successful missions
success_counts = successful_missions.groupby('Collaboration_Group').size().reset_index(name='Success ≥90% Count')

# Optional: Sort by count descending
success_counts = success_counts.sort_values(by='Success ≥90% Count', ascending=False).reset_index(drop=True)

# Display the result
success_counts

# Step 1: Get bottom 10 collaboration groups by frequency
bottom_collab_groups = df['Collaboration_Group'].value_counts().tail(10).index.tolist()

# Step 2: Filter the main DataFrame for only those bottom collaboration groups
bottom_collab_df = df[df['Collaboration_Group'].isin(bottom_collab_groups)]

# Step 3: Filter missions with Success Rate ≥ 90%
successful_bottom = bottom_collab_df[bottom_collab_df['Success Rate (%)'] >= 90]

# Step 4: Group by Collaboration Group and count the high-success missions
bottom_success_counts = successful_bottom.groupby('Collaboration_Group').size().reset_index(name='Success ≥90% Count')

# Optional: Sort by count
bottom_success_counts = bottom_success_counts.sort_values(by='Success ≥90% Count', ascending=False).reset_index(drop=True)

# Display the table
bottom_success_counts

# Step 1: Group by Satellite Type and sum the Mission Budget
budget_by_satellite_type = df.groupby('Satellite Type')['Mission Budget (in Billion $)'].sum().reset_index()

# Step 2: Create a bar chart
fig = px.bar(
    budget_by_satellite_type,
    x='Satellite Type',
    y='Mission Budget (in Billion $)',
    title='Total Budget Investment by Satellite Type',
    labels={
        'Satellite Type': 'Satellite Type',
        'Mission Budget (in Billion $)': 'Total Budget (Billion $)'
    },
    color='Satellite Type',
    height=600
)

# Step 3: Improve readability
fig.update_layout(
    template='plotly_white',
    title_font=dict(size=20),
    xaxis_title='Satellite Type',
    yaxis_title='Total Mission Budget (Billion $)',
    showlegend=False,
    hovermode='x unified'
)

# Show plot
fig.show()

# Step 1: Group by both Country and Satellite Type, and sum the mission budgets
country_satellite_budget = df.groupby(['Country', 'Satellite Type'])['Mission Budget (in Billion $)'].sum().reset_index()

# Step 2: Create the bar chart
fig = px.bar(
    country_satellite_budget,
    x='Satellite Type',
    y='Mission Budget (in Billion $)',
    color='Country',
    title='Country-wise Investment in Each Satellite Type',
    labels={
        'Satellite Type': 'Satellite Type',
        'Mission Budget (in Billion $)': 'Total Budget (Billion $)',
        'Country': 'Country'
    },
    barmode='group',  # or try 'stack' for stacked view
    height=600
)

# Step 3: Update layout
fig.update_layout(
    template='plotly_white',
    title_font=dict(size=20),
    xaxis_title='Satellite Type',
    yaxis_title='Total Budget (Billion $)',
    hovermode='x unified'
)

# Show plot
fig.show()

import pandas as pd
import numpy as np
from scipy.stats import chi2_contingency

# Step 1: Create a contingency table
contingency_table = pd.crosstab(df['Satellite Type'], df['Environmental Impact'])

# Step 2: Chi-square test
chi2, p, dof, expected = chi2_contingency(contingency_table)

# Step 3: Calculate Cramér's V
n = contingency_table.sum().sum()
cramers_v = np.sqrt(chi2 / (n * (min(contingency_table.shape)-1)))

# Step 4: Output the result
print(f"Cramér's V (Association between Satellite Type and Environmental Impact): {cramers_v:.3f}")
print(f"P-value from Chi-square test: {p:.4f}")

# Step 1: Filter the data for 1, 2, or 3 collaborators
collaborator_count_data = df[df['Num_Collaborators'].isin([1, 2, 3])]

# Step 2: Group by both 'Num_Collaborators' and 'Satellite Type' and count the occurrences
collaborator_satellite_counts = collaborator_count_data.groupby(['Num_Collaborators', 'Satellite Type']).size().reset_index(name='Count')

# Step 3: Pivot the table to have 'Num_Collaborators' as rows and 'Satellite Type' as columns
collab_satellite_pivot = collaborator_satellite_counts.pivot(index='Num_Collaborators', columns='Satellite Type', values='Count').fillna(0)

# Step 4: Show the pivot table
collab_satellite_pivot

# Step 1: Group by both 'Mission Type' and 'Satellite Type' and count the occurrences
mission_type_satellite_counts = df.groupby(['Mission Type', 'Satellite Type']).size().reset_index(name='Count')

# Step 2: Pivot the table to have 'Mission Type' as rows and 'Satellite Type' as columns
mission_type_satellite_pivot = mission_type_satellite_counts.pivot(index='Mission Type', columns='Satellite Type', values='Count').fillna(0)

# Step 3: Show the pivot table
mission_type_satellite_pivot

# Step 1: Sort by Satellite Type and Budget (descending)
sorted_df = df.sort_values(by=['Satellite Type', 'Mission Budget (in Billion $)'], ascending=[True, False])

# Step 2: Get top 1 and bottom 1 for each Satellite Type
top_budgets = sorted_df.groupby('Satellite Type').head(1)
bottom_budgets = sorted_df.groupby('Satellite Type').tail(1)

# Step 3: Add a label to distinguish Top vs Bottom
top_budgets['Budget Level'] = 'Top'
bottom_budgets['Budget Level'] = 'Lowest'

# Step 4: Combine both into one DataFrame
top_bottom_budget_table = pd.concat([top_budgets, bottom_budgets])

# Step 5: Select only relevant columns for the table
final_table = top_bottom_budget_table[[
    'Satellite Type',
    'Budget Level',
    'Mission Budget (in Billion $)',
    'Success Rate (%)'

]].sort_values(by=['Satellite Type', 'Budget Level'])

# Display the table
final_table.reset_index(drop=True, inplace=True)
final_table

import pandas as pd

# Step 1: Filter for Success Rate >= 90
df_90plus = df[df['Success Rate (%)'] >= 90]

# Step 2: Pivot table with Satellite Type as index, Success Rate as columns
pivot_table = pd.pivot_table(
    df_90plus,
    index='Satellite Type',
    columns='Success Rate (%)',
    values='Mission Name',  # You can use any column just to count rows
    aggfunc='count',
    fill_value=0
)

# Step 3: Add total column
pivot_table['Total'] = pivot_table.sum(axis=1)

# Optional: Sort by Total descending
pivot_table = pivot_table.sort_values(by='Total', ascending=False)

# Step 4: Display table
pivot_table.reset_index(inplace=True)
pivot_table

# Step 1: Filter for Success Rate between 50 and 89
df_50to89 = df[(df['Success Rate (%)'] >= 45) & (df['Success Rate (%)'] < 75)]

# Step 2: Pivot table with Satellite Type as index, Success Rate as columns
pivot_table_50to89 = pd.pivot_table(
    df_50to89,
    index='Satellite Type',
    columns='Success Rate (%)',
    values='Mission Name',
    aggfunc='count',
    fill_value=0
)

# Step 3: Add total column
pivot_table_50to89['Total'] = pivot_table_50to89.sum(axis=1)

# Optional: Sort by Total descending
pivot_table_50to89 = pivot_table_50to89.sort_values(by='Total', ascending=False)

# Step 4: Display table
pivot_table_50to89.reset_index(inplace=True)
pivot_table_50to89

# Step 1: Filter for Success Rate between 50 and 89
df_50to89 = df[(df['Success Rate (%)'] >= 75) & (df['Success Rate (%)'] <= 100)]

# Step 2: Pivot table with Satellite Type as index, Success Rate as columns
pivot_table_50to89 = pd.pivot_table(
    df_50to89,
    index='Satellite Type',
    columns='Success Rate (%)',
    values='Mission Name',
    aggfunc='count',
    fill_value=0
)

# Step 3: Add total column
pivot_table_50to89['Total'] = pivot_table_50to89.sum(axis=1)

# Optional: Sort by Total descending
pivot_table_50to89 = pivot_table_50to89.sort_values(by='Total', ascending=False)

# Step 4: Display table
pivot_table_50to89.reset_index(inplace=True)
pivot_table_50to89

import plotly.express as px

# Step 1: Count how many times each impact level appears for each technology
impact_counts = df.groupby(['Technology Used', 'Environmental Impact']).size().reset_index(name='Count')

# Step 2: Stacked bar chart
fig = px.bar(
    impact_counts,
    x='Technology Used',
    y='Count',
    color='Environmental Impact',
    barmode='stack',
    title='Environmental Impact Distribution by Technology Used',
    labels={
        'Technology Used': 'Technology',
        'Environmental Impact': 'Impact Level',
        'Count': 'Number of Missions'
    },
    height=600
)

# Step 3: Improve layout
fig.update_layout(
    template='plotly_white',
    title_font=dict(size=20),
    xaxis_tickangle=-45,
    xaxis_title='Technology Used',
    yaxis_title='Count of Missions',
    legend_title='Environmental Impact',
    hovermode='x unified'
)

fig.show()

# Step 1: Count occurrences of each Environmental Impact level per Technology
impact_counts = df.groupby(['Technology Used', 'Environmental Impact']).size().reset_index(name='Count')

# Step 2: Pivot the data to make it more readable as a table
impact_table = impact_counts.pivot_table(
    index='Technology Used',
    columns='Environmental Impact',
    values='Count',
    fill_value=0
).reset_index()

# Optional: Rename columns for clarity
impact_table.columns.name = None
impact_table.rename(columns={
    'Low': 'Low Impact',
    'Medium': 'Medium Impact',
    'High': 'High Impact'
}, inplace=True)

# Display the table
impact_table

# Step 1: Group by Technology Used and get the row with max budget for each technology
top_budget_tech = df.loc[df.groupby('Technology Used')['Mission Budget (in Billion $)'].idxmax()]

# Step 2: Select only relevant columns
top_budget_table = top_budget_tech[['Technology Used', 'Mission Budget (in Billion $)', 'Success Rate (%)']]

# Step 3: Sort for easier viewing (optional)
top_budget_table = top_budget_table.sort_values(by='Mission Budget (in Billion $)', ascending=False).reset_index(drop=True)

# Display the final table
top_budget_table

# Step 1: Group by Technology Used and get the bottom budget for each technology
bottom_budget_tech = df.loc[df.groupby('Technology Used')['Mission Budget (in Billion $)'].idxmin()]

# Step 2: Select only relevant columns for clarity (e.g., Technology, Mission Name, Budget, Success Rate)
bottom_budget_tech = bottom_budget_tech[['Technology Used', 'Mission Name', 'Mission Budget (in Billion $)', 'Success Rate (%)']]

# Step 3: Plot the results as a bar chart
import plotly.express as px

fig = px.bar(
    bottom_budget_tech,
    x='Technology Used',
    y='Mission Budget (in Billion $)',
    color='Success Rate (%)',
    title='Bottom Mission Budgets for Each Technology Used',
    labels={
        'Technology Used': 'Technology',
        'Mission Budget (in Billion $)': 'Mission Budget (Billion $)',
        'Success Rate (%)': 'Success Rate (%)'
    },
    height=600
)

# Improve layout
fig.update_layout(
    template='plotly_white',
    xaxis_tickangle=-45,
    xaxis_title='Technology Used',
    yaxis_title='Mission Budget (Billion $)',
    showlegend=True
)

fig.show()

# Step 1: Group by Technology Used and get the row with the lowest budget for each technology
bottom_budget_tech = df.loc[df.groupby('Technology Used')['Mission Budget (in Billion $)'].idxmin()]

# Step 2: Select relevant columns
bottom_budget_table = bottom_budget_tech[['Technology Used', 'Mission Budget (in Billion $)', 'Success Rate (%)']]

# Step 3: Sort for clarity (optional)
bottom_budget_table = bottom_budget_table.sort_values(by='Mission Budget (in Billion $)').reset_index(drop=True)

# Display the table
bottom_budget_table

impact_map = {'Low': 1, 'Medium': 2, 'High': 3}
df['Environmental_Impact_Num'] = df['Environmental Impact'].map(impact_map)
correlation = df[['Mission Budget (in Billion $)', 'Environmental_Impact_Num']].corr().iloc[0, 1]
print(f"Correlation between Mission Budget and Environmental Impact: {correlation:.4f}")

# Step 1: Get top-budget missions for each technology
top_budget_tech = df.loc[df.groupby('Technology Used')['Mission Budget (in Billion $)'].idxmax()]

# Step 2: Select relevant columns including Success Rate
top_budget_tech_table = top_budget_tech[
    ['Country','Technology Used', 'Mission Budget (in Billion $)',
     'Collaborating Countries', 'Satellite Type', 'Success Rate (%)']
]

# Step 3: Sort by budget for cleaner view (optional)
top_budget_tech_table = top_budget_tech_table.sort_values(by='Mission Budget (in Billion $)', ascending=False)

# Step 4: Reset index for clean output
top_budget_tech_table.reset_index(drop=True, inplace=True)

# Step 5: Display the table
top_budget_tech_table

# Step 1: Get bottom-budget missions (same as before)
bottom_budget_tech = df.loc[df.groupby('Technology Used')['Mission Budget (in Billion $)'].idxmin()]

# Step 2: Select relevant columns (Technology, Mission Name, Budget, Collaborating Countries, Satellite Type)
bottom_budget_tech = bottom_budget_tech[['Technology Used', 'Mission Name', 'Mission Budget (in Billion $)', 'Collaborating Countries', 'Satellite Type']]

# Step 3: Plot the results
import plotly.express as px

fig = px.bar(
    bottom_budget_tech,
    x='Technology Used',
    y='Mission Budget (in Billion $)',
    color='Satellite Type',
    title='Lowest Mission Budgets by Technology Used, Collaborating Countries, and Satellite Type',
    labels={
        'Technology Used': 'Technology',
        'Mission Budget (in Billion $)': 'Mission Budget (Billion $)',
        'Collaborating Countries': 'Collaborating Countries',
        'Satellite Type': 'Satellite Type'
    },
    height=600
)

# Add collaborating countries as hover data to show when hovering over bars
fig.update_traces(
    hovertemplate="Mission: %{x}<br>Budget: %{y} Billion $<br>Satellite Type: %{color}<br>Collaborators: %{customdata}",
    customdata=bottom_budget_tech['Collaborating Countries']
)

# Improve layout
fig.update_layout(
    template='plotly_white',
    title_font=dict(size=20),
    xaxis_tickangle=-45,
    xaxis_title='Technology Used',
    yaxis_title='Mission Budget (Billion $)',
    showlegend=True
)

fig.show()

# Step 1: Group and find the index of top and lowest budgets per country
top_budgets = df.loc[df.groupby('Country')['Mission Budget (in Billion $)'].idxmax()]
low_budgets = df.loc[df.groupby('Country')['Mission Budget (in Billion $)'].idxmin()]

# Step 2: Rename columns for clarity
top_budgets = top_budgets[['Country', 'Mission Budget (in Billion $)', 'Collaborating Countries', 'Technology Used', 'Success Rate (%)']]
top_budgets.columns = ['Country', 'Top Budget (B$)', 'Top Budget Collaborating Countries','Top Budget Technology Used',  'Top Success Rate (%)']

low_budgets = low_budgets[['Country', 'Mission Budget (in Billion $)', 'Collaborating Countries', 'Technology Used', 'Success Rate (%)']]
low_budgets.columns = ['Country', 'Lowest Budget (B$)', 'Lowest Budget Collaborating Countries', 'Lowest Budget Technology Used', 'Lowest Success Rate (%)']

# Step 3: Merge both tables on Country
budget_summary = pd.merge(top_budgets, low_budgets, on='Country')

# Display table
budget_summary.sort_values(by='Top Budget (B$)', ascending=False).reset_index(drop=True)

# Get the row with the longest duration
longest_mission = df.loc[df['Duration (in Days)'].idxmax()]

# Create a DataFrame from the single row for display as table
longest_mission_table = pd.DataFrame({
    'Mission Budget (in Billion $)': [longest_mission['Mission Budget (in Billion $)']],
    'Duration (Days)': [longest_mission['Duration (in Days)']],
    'Technology Used': [longest_mission['Technology Used']],
    'Satellite Type': [longest_mission['Satellite Type']],
    'Environmental Impact': [longest_mission['Environmental Impact']]
})

# Display the table
longest_mission_table

# Get the row with the shortest duration
shortest_mission = df.loc[df['Duration (in Days)'].idxmin()]

# Create a DataFrame from the single row for display as table
shortest_mission_table = pd.DataFrame({
    'Mission Budget (in Billion $)': [shortest_mission['Mission Budget (in Billion $)']],
    'Duration (Days)': [shortest_mission['Duration (in Days)']],
    'Technology Used': [shortest_mission['Technology Used']],
    'Satellite Type': [shortest_mission['Satellite Type']],
    'Environmental Impact': [shortest_mission['Environmental Impact']]
})

# Display the table
shortest_mission_table

# Step 1: Filter the years 2021 to 2024
recent_years_df = df[df['Year'].isin([2021, 2022, 2023, 2024])]

# Step 2: Group by Year and Environmental Impact and count occurrences
impact_counts = recent_years_df.groupby(['Year', 'Environmental Impact']).size().reset_index(name='Count')

# Step 3: Pivot the table to show Environmental Impacts per Year
impact_pivot = impact_counts.pivot(index='Year', columns='Environmental Impact', values='Count').fillna(0).astype(int)

# Display the table
impact_pivot

import pandas as pd

# Assuming your dataframe is called df
# First, remove leading/trailing whitespace for safety
df['Country'] = df['Country'].str.strip()
df['Collaborating Countries'] = df['Collaborating Countries'].str.strip()

# Filter rows where Collaborating Countries matches Country exactly
mask = df['Country'] == df['Collaborating Countries']

# Apply mask to get the result
solo_country_collab = df[mask]
solo_country_collab