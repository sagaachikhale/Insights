# -*- coding: utf-8 -*-
"""Project1Aerospace.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1NQ6y09BKybTB8uDBL8aN7NlIIoH3Gg_t
"""

import numpy as np
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
import plotly.express as px
import warnings
warnings.filterwarnings('ignore')

path = '/content/drive/MyDrive/Project 1/Aerospace/Global_Space_Exploration_Dataset.csv'
df = pd.read_csv(path)

df.head(2)

df.info()

df = df.rename(columns={'Budget (in Billion $)': 'Mission Budget (in Billion $)'}) #renaming column name
df.head(2)

df.describe()

df.describe(include='object')

df['Country'].value_counts() # total mentioned countries

df['Satellite Type'].value_counts() # total mentioned Satellite Type

df['Technology Used'].value_counts() # total mentioned Technology Used

# new column 'Num_Collaborators' by counting the countries
df['Num_Collaborators'] = df['Collaborating Countries'].apply(lambda x: len([i.strip() for i in str(x).split(',')]) if pd.notna(x) else 0)
#
print(df[['Collaborating Countries', 'Num_Collaborators']].head())

df['Collab_List'] = df['Collaborating Countries'].apply(lambda x: [i.strip() for i in str(x).split(',')] if pd.notna(x) else [])

df_exploded = df.explode('Collab_List')

df_exploded = df_exploded.rename(columns={'Collab_List': 'Collab_Country'})

print(df_exploded[['Year', 'Mission Name', 'Collab_Country']].head())

china_primary = df[df['Country'] == 'China'][['Year', 'Mission Name']]
china_collab = df_exploded[df_exploded['Collab_Country'] == 'China'][['Year', 'Mission Name']]
china_all_missions = pd.concat([china_primary, china_collab]).drop_duplicates()
china_missions_by_year = china_all_missions.groupby('Year').size().reset_index(name='Mission_Count')

plt.figure(figsize=(10, 5))
plt.plot(china_missions_by_year['Year'], china_missions_by_year['Mission_Count'], marker='o', color='red')
plt.title("China's Total Space Mission Involvement (2000–2025)")
plt.xlabel('Year')
plt.ylabel('Number of Missions')
plt.grid(True)
plt.xticks(range(2000, 2026, 2))
plt.tight_layout()
plt.show()

import plotly.graph_objects as go
from plotly.subplots import make_subplots

# List of top countries to visualize
top_countries = ['China', 'UK', 'Israel', 'France', 'UAE', 'USA', 'India', 'Japan', 'Russia', 'Germany']

fig = make_subplots(rows=2, cols=5,subplot_titles=top_countries,shared_yaxes=True,horizontal_spacing=0.05,vertical_spacing=0.15)

row, col = 1, 1

for country in top_countries:
    main_missions = df[df['Country'] == country][['Year', 'Mission Name']]
    collab_missions = df_exploded[df_exploded['Collab_Country'] == country][['Year', 'Mission Name']]

    all_missions = pd.concat([main_missions, collab_missions]).drop_duplicates()
    missions_by_year = all_missions.groupby('Year').size().reset_index(name='Mission_Count')

    fig.add_trace(go.Scatter(x=missions_by_year['Year'],y=missions_by_year['Mission_Count'],mode='lines+markers',name=country,hovertemplate='Year: %{x}<br>Missions: %{y}<extra></extra>'),row=row, col=col)

    col += 1
    if col > 5:
        col = 1
        row += 1

fig.update_layout(height=800,width=1400,title_text="Top 10 Countries – Space Mission Involvement (2000–2025)",showlegend=False,template="plotly_white")

fig.show()

country_missions = []

for country in top_countries:
    main_missions = df[df['Country'] == country]
    collab_missions = df_exploded[df_exploded['Collab_Country'] == country]

    total_missions = len(main_missions) + len(collab_missions)

    country_missions.append((country, total_missions))

missions_table = pd.DataFrame(country_missions, columns=['Country', 'Total Missions'])

missions_table

main_country_counts = df['Country'].value_counts().reset_index()
main_country_counts.columns = ['Country', 'Mission_Count']

fig = px.bar(main_country_counts,x='Country',y='Mission_Count',title='Number of Missions Led by Each Country (Excluding Collaborations)',labels={'Country': 'Country', 'Mission_Count': 'Number of Missions (Lead Only)'},color='Mission_Count',color_continuous_scale='Tealgrn')

fig.update_layout(xaxis_tickangle=45,template='plotly_white',showlegend=False,title_font=dict(size=20))

fig.show()

collab_counts = df_exploded['Collab_Country'].value_counts().reset_index() # Changed 'Collab_List' to 'Collab_Country'
collab_counts.columns = ['Country', 'Collaboration_Count']
fig = px.bar(collab_counts,x='Country',y='Collaboration_Count',title='Top Collaborating Countries in Space Missions (2000–2025)',labels={'Country': 'Country', 'Collaboration_Count': 'Times Participated as Collaborator'},color='Collaboration_Count',color_continuous_scale='Blues')
fig.update_layout(xaxis_tickangle=45,template='plotly_white',showlegend=False,title_font=dict(size=20))
fig.show()

china_collab_count = df_exploded['Collab_Country'].value_counts().get('China', 0) # Changed 'Collab_List' to 'Collab_Country'
print(f"China has appeared as a collaborating country in {china_collab_count} missions.")

mission_counts_by_collaborators = df[df['Num_Collaborators'].isin([1, 2, 3])]
mission_count_by_collab = mission_counts_by_collaborators.groupby('Num_Collaborators').size().reset_index(name='Mission Count')
fig = px.bar(mission_count_by_collab,x='Num_Collaborators',y='Mission Count',title='Mission Count by Number of Collaborators',labels={'Num_Collaborators': 'Number of Collaborators','Mission Count': 'Number of Missions'},height=600)

fig.update_layout(template='plotly_white',title_font=dict(size=20),xaxis_title='Number of Collaborators',yaxis_title='Number of Missions',showlegend=False,hovermode='x unified')

fig.show()

from collections import defaultdict

filtered_df = df[df['Num_Collaborators'].isin([1, 2, 3])]
filtered_df['Collab_List'] = filtered_df['Collaborating Countries'].apply(lambda x: [i.strip() for i in str(x).split(',')] if pd.notna(x) else [])
df_exploded = filtered_df.explode('Collab_List')
collab_counts = df_exploded.groupby(['Collab_List', 'Num_Collaborators']).size().unstack(fill_value=0)
collab_counts.columns.name = 'Num_Collaborators'
collab_counts.index.name = 'Country'
collab_counts = collab_counts.sort_index()
print(collab_counts)

success_dist = df.groupby(['Num_Collaborators', 'Success Rate (%)']).size().reset_index(name='Count')
fig = px.line(success_dist,x='Success Rate (%)',y='Count', color='Num_Collaborators',markers=True,title='Mission Success Rate Distribution by Number of Collaborating Countries',labels={'Success Rate (%)': 'Success Rate (%)','Count': 'Number of Missions','Num_Collaborators': 'Number of Collaborators'})
fig.update_layout(template='plotly_white',title_font=dict(size=20),xaxis=dict(dtick=5),yaxis_title='Mission Count',hovermode='x unified')
fig.show()

pivot_table = df.pivot_table(index='Num_Collaborators', columns='Success Rate (%)', values='Mission Budget (in Billion $)', aggfunc='count') # Changed 'values' to numeric column and set 'aggfunc' to 'count'
pivot_table = pivot_table.sort_index().sort_index(axis=1)
pivot_table

filtered_df = df[df['Num_Collaborators'].isin([1, 2, 3])]

success_table = filtered_df.pivot_table(index='Num_Collaborators',columns='Success Rate (%)',values='Mission Name',  aggfunc='count',fill_value=0)
success_table['Total'] = success_table.sum(axis=1)
success_table = success_table.sort_index()
success_table

df_90plus = df[df['Success Rate (%)'] >= 90]
pivot_90plus = df_90plus.pivot_table(index='Num_Collaborators',columns='Success Rate (%)',values='Mission Name',aggfunc='count',fill_value=0)
pivot_90plus['Total'] = pivot_90plus.sum(axis=1)
pivot_90plus = pivot_90plus.sort_index()

pivot_90plus

def get_collab_group(row):
    collab = [c.strip() for c in str(row['Collaborating Countries']).split(',') if c.strip()]
    all_countries = list(set([row['Country']] + collab))  # remove duplicates
    return ', '.join(sorted(all_countries))  # sorted to make grouping consistent

df['Collaboration_Group'] = df.apply(get_collab_group, axis=1)
group_counts = df['Collaboration_Group'].value_counts().reset_index()
group_counts.columns = ['Collaboration_Group', 'Count']
group_counts.head(10)

a = group_counts.tail(10).reset_index()
a = a.drop(columns=['index'])
a

top_collab_groups = df['Collaboration_Group'].value_counts().head(10).index.tolist()
top_collab_df = df[df['Collaboration_Group'].isin(top_collab_groups)]
successful_missions = top_collab_df[top_collab_df['Success Rate (%)'] >= 90]
success_counts = successful_missions.groupby('Collaboration_Group').size().reset_index(name='Success ≥90% Count')
success_counts = success_counts.sort_values(by='Success ≥90% Count', ascending=False).reset_index(drop=True)
success_counts

bottom_collab_groups = df['Collaboration_Group'].value_counts().tail(10).index.tolist()
bottom_collab_df = df[df['Collaboration_Group'].isin(bottom_collab_groups)]
successful_bottom = bottom_collab_df[bottom_collab_df['Success Rate (%)'] >= 90]
bottom_success_counts = successful_bottom.groupby('Collaboration_Group').size().reset_index(name='Success ≥90% Count')
bottom_success_counts = bottom_success_counts.sort_values(by='Success ≥90% Count', ascending=False).reset_index(drop=True)
bottom_success_counts

budget_by_satellite_type = df.groupby('Satellite Type')['Mission Budget (in Billion $)'].sum().reset_index()
fig = px.bar(budget_by_satellite_type,x='Satellite Type',y='Mission Budget (in Billion $)',title='Total Budget Investment by Satellite Type',labels={'Satellite Type': 'Satellite Type','Mission Budget (in Billion $)': 'Total Budget (Billion $)'},color='Satellite Type',height=600)
fig.update_layout(template='plotly_white',title_font=dict(size=20),xaxis_title='Satellite Type',yaxis_title='Total Mission Budget (Billion $)',showlegend=False,hovermode='x unified')
fig.show()

country_satellite_budget = df.groupby(['Country', 'Satellite Type'])['Mission Budget (in Billion $)'].sum().reset_index()
fig = px.bar(country_satellite_budget,x='Satellite Type',y='Mission Budget (in Billion $)',color='Country',title='Country-wise Investment in Each Satellite Type',labels={'Satellite Type': 'Satellite Type','Mission Budget (in Billion $)': 'Total Budget (Billion $)','Country': 'Country'},barmode='group',height=600)
fig.update_layout(template='plotly_white',title_font=dict(size=20),xaxis_title='Satellite Type',yaxis_title='Total Budget (Billion $)',hovermode='x unified')
fig.show()

from scipy.stats import chi2_contingency

contingency_table = pd.crosstab(df['Satellite Type'], df['Environmental Impact'])

chi2, p, dof, expected = chi2_contingency(contingency_table)

n = contingency_table.sum().sum()
cramers_v = np.sqrt(chi2 / (n * (min(contingency_table.shape)-1)))

print(f"Cramér's V (Association between Satellite Type and Environmental Impact): {cramers_v:.3f}")
print(f"P-value from Chi-square test: {p:.4f}")

collaborator_count_data = df[df['Num_Collaborators'].isin([1, 2, 3])]
collaborator_satellite_counts = collaborator_count_data.groupby(['Num_Collaborators', 'Satellite Type']).size().reset_index(name='Count')
collab_satellite_pivot = collaborator_satellite_counts.pivot(index='Num_Collaborators', columns='Satellite Type', values='Count').fillna(0)
collab_satellite_pivot

mission_type_satellite_counts = df.groupby(['Mission Type', 'Satellite Type']).size().reset_index(name='Count')
mission_type_satellite_pivot = mission_type_satellite_counts.pivot(index='Mission Type', columns='Satellite Type', values='Count').fillna(0)
mission_type_satellite_pivot

sorted_df = df.sort_values(by=['Satellite Type', 'Mission Budget (in Billion $)'], ascending=[True, False])
top_budgets = sorted_df.groupby('Satellite Type').head(1)
bottom_budgets = sorted_df.groupby('Satellite Type').tail(1)
top_budgets['Budget Level'] = 'Top'
bottom_budgets['Budget Level'] = 'Lowest'
top_bottom_budget_table = pd.concat([top_budgets, bottom_budgets])
final_table = top_bottom_budget_table[['Satellite Type','Budget Level','Mission Budget (in Billion $)','Success Rate (%)']].sort_values(by=['Satellite Type', 'Budget Level'])
final_table.reset_index(drop=True, inplace=True)
final_table

df_90plus = df[df['Success Rate (%)'] >= 90]
pivot_table = pd.pivot_table(df_90plus,index='Satellite Type',columns='Success Rate (%)',values='Mission Name', aggfunc='count',fill_value=0)
pivot_table['Total'] = pivot_table.sum(axis=1)
pivot_table = pivot_table.sort_values(by='Total', ascending=False)
pivot_table.reset_index(inplace=True)
pivot_table

df_50to89 = df[(df['Success Rate (%)'] >= 45) & (df['Success Rate (%)'] < 75)]
pivot_table_50to89 = pd.pivot_table(df_50to89,index='Satellite Type',columns='Success Rate (%)',values='Mission Name',aggfunc='count',fill_value=0)
pivot_table_50to89['Total'] = pivot_table_50to89.sum(axis=1)
pivot_table_50to89 = pivot_table_50to89.sort_values(by='Total', ascending=False)
pivot_table_50to89.reset_index(inplace=True)
pivot_table_50to89

df_50to89 = df[(df['Success Rate (%)'] >= 75) & (df['Success Rate (%)'] <= 100)]
pivot_table_50to89 = pd.pivot_table(df_50to89,index='Satellite Type',columns='Success Rate (%)',values='Mission Name',aggfunc='count',fill_value=0)
pivot_table_50to89['Total'] = pivot_table_50to89.sum(axis=1)
pivot_table_50to89 = pivot_table_50to89.sort_values(by='Total', ascending=False)
pivot_table_50to89.reset_index(inplace=True)
pivot_table_50to89

impact_counts = df.groupby(['Technology Used', 'Environmental Impact']).size().reset_index(name='Count')
fig = px.bar(impact_counts,x='Technology Used',y='Count',color='Environmental Impact',barmode='stack',title='Environmental Impact Distribution by Technology Used',labels={'Technology Used': 'Technology','Environmental Impact': 'Impact Level','Count': 'Number of Missions'},height=600)
fig.update_layout(template='plotly_white',title_font=dict(size=20),xaxis_tickangle=-45,xaxis_title='Technology Used',yaxis_title='Count of Missions',legend_title='Environmental Impact',hovermode='x unified')
fig.show()

impact_counts = df.groupby(['Technology Used', 'Environmental Impact']).size().reset_index(name='Count')
impact_table = impact_counts.pivot_table(index='Technology Used',columns='Environmental Impact',values='Count',fill_value=0).reset_index()
impact_table.columns.name = None
impact_table.rename(columns={'Low': 'Low Impact','Medium': 'Medium Impact','High': 'High Impact'}, inplace=True)

impact_table

top_budget_tech = df.loc[df.groupby('Technology Used')['Mission Budget (in Billion $)'].idxmax()]
top_budget_table = top_budget_tech[['Technology Used', 'Mission Budget (in Billion $)', 'Success Rate (%)']]
top_budget_table = top_budget_table.sort_values(by='Mission Budget (in Billion $)', ascending=False).reset_index(drop=True)
top_budget_table

bottom_budget_tech = df.loc[df.groupby('Technology Used')['Mission Budget (in Billion $)'].idxmin()]
bottom_budget_tech = bottom_budget_tech[['Technology Used', 'Mission Name', 'Mission Budget (in Billion $)', 'Success Rate (%)']]
fig = px.bar(bottom_budget_tech,x='Technology Used',y='Mission Budget (in Billion $)',color='Success Rate (%)',title='Bottom Mission Budgets for Each Technology Used',labels={'Technology Used': 'Technology','Mission Budget (in Billion $)': 'Mission Budget (Billion $)','Success Rate (%)': 'Success Rate (%)'},height=600)
fig.update_layout(template='plotly_white',xaxis_tickangle=-45,xaxis_title='Technology Used',yaxis_title='Mission Budget (Billion $)',showlegend=True)

fig.show()

bottom_budget_tech = df.loc[df.groupby('Technology Used')['Mission Budget (in Billion $)'].idxmin()]
bottom_budget_table = bottom_budget_tech[['Technology Used', 'Mission Budget (in Billion $)', 'Success Rate (%)']]
bottom_budget_table = bottom_budget_table.sort_values(by='Mission Budget (in Billion $)').reset_index(drop=True)

bottom_budget_table

impact_map = {'Low': 1, 'Medium': 2, 'High': 3}
df['Environmental_Impact_Num'] = df['Environmental Impact'].map(impact_map)
correlation = df[['Mission Budget (in Billion $)', 'Environmental_Impact_Num']].corr().iloc[0, 1]
print(f"Correlation between Mission Budget and Environmental Impact: {correlation:.4f}")

top_budget_tech = df.loc[df.groupby('Technology Used')['Mission Budget (in Billion $)'].idxmax()]
top_budget_tech_table = top_budget_tech[['Country','Technology Used', 'Mission Budget (in Billion $)','Collaborating Countries', 'Satellite Type', 'Success Rate (%)']]
top_budget_tech_table = top_budget_tech_table.sort_values(by='Mission Budget (in Billion $)', ascending=False)
top_budget_tech_table.reset_index(drop=True, inplace=True)
top_budget_tech_table

bottom_budget_tech = df.loc[df.groupby('Technology Used')['Mission Budget (in Billion $)'].idxmin()]
bottom_budget_tech = bottom_budget_tech[['Technology Used', 'Mission Name', 'Mission Budget (in Billion $)', 'Collaborating Countries', 'Satellite Type']]
fig = px.bar(bottom_budget_tech,x='Technology Used',y='Mission Budget (in Billion $)',color='Satellite Type',title='Lowest Mission Budgets by Technology Used, Collaborating Countries, and Satellite Type',labels={'Technology Used': 'Technology','Mission Budget (in Billion $)': 'Mission Budget (Billion $)','Collaborating Countries': 'Collaborating Countries','Satellite Type': 'Satellite Type'},height=600)

fig.update_traces(hovertemplate="Mission: %{x}<br>Budget: %{y} Billion $<br>Satellite Type: %{color}<br>Collaborators: %{customdata}",customdata=bottom_budget_tech['Collaborating Countries'])
fig.update_layout(template='plotly_white',title_font=dict(size=20),xaxis_tickangle=-45,xaxis_title='Technology Used',yaxis_title='Mission Budget (Billion $)',showlegend=True)

fig.show()

top_budgets = df.loc[df.groupby('Country')['Mission Budget (in Billion $)'].idxmax()]
low_budgets = df.loc[df.groupby('Country')['Mission Budget (in Billion $)'].idxmin()]

top_budgets = top_budgets[['Country', 'Mission Budget (in Billion $)', 'Collaborating Countries', 'Technology Used', 'Success Rate (%)']]
top_budgets.columns = ['Country', 'Top Budget (B$)', 'Top Budget Collaborating Countries','Top Budget Technology Used',  'Top Success Rate (%)']

low_budgets = low_budgets[['Country', 'Mission Budget (in Billion $)', 'Collaborating Countries', 'Technology Used', 'Success Rate (%)']]
low_budgets.columns = ['Country', 'Lowest Budget (B$)', 'Lowest Budget Collaborating Countries', 'Lowest Budget Technology Used', 'Lowest Success Rate (%)']

budget_summary = pd.merge(top_budgets, low_budgets, on='Country')

budget_summary.sort_values(by='Top Budget (B$)', ascending=False).reset_index(drop=True)

longest_mission = df.loc[df['Duration (in Days)'].idxmax()]
longest_mission_table = pd.DataFrame({'Mission Budget (in Billion $)': [longest_mission['Mission Budget (in Billion $)']],'Duration (Days)': [longest_mission['Duration (in Days)']],'Technology Used': [longest_mission['Technology Used']],'Satellite Type': [longest_mission['Satellite Type']],'Environmental Impact': [longest_mission['Environmental Impact']]})

longest_mission_table

shortest_mission = df.loc[df['Duration (in Days)'].idxmin()]
shortest_mission_table = pd.DataFrame({'Mission Budget (in Billion $)': [shortest_mission['Mission Budget (in Billion $)']],'Duration (Days)': [shortest_mission['Duration (in Days)']],'Technology Used': [shortest_mission['Technology Used']],'Satellite Type': [shortest_mission['Satellite Type']],'Environmental Impact': [shortest_mission['Environmental Impact']]})
shortest_mission_table

recent_years_df = df[df['Year'].isin([2021, 2022, 2023, 2024])]
impact_counts = recent_years_df.groupby(['Year', 'Environmental Impact']).size().reset_index(name='Count')
impact_pivot = impact_counts.pivot(index='Year', columns='Environmental Impact', values='Count').fillna(0).astype(int)

impact_pivot

df['Country'] = df['Country'].str.strip()
df['Collaborating Countries'] = df['Collaborating Countries'].str.strip()
mask = df['Country'] == df['Collaborating Countries']
solo_country_collab = df[mask]
solo_country_collab